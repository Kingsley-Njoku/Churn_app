{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1qvNpCxoJhMd0Zzp9wj_G7KcdmV2_v2sJ","authorship_tag":"ABX9TyOh0mDH5aMZJyPIiqeeNMSO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PC1J8Kds5cF5","executionInfo":{"status":"ok","timestamp":1757514897471,"user_tz":-60,"elapsed":88,"user":{"displayName":"Kingsley Njoku","userId":"08166525276470933218"}},"outputId":"da98c3cb-5aae-4e5b-a150-519addeb0ed6"},"outputs":[{"output_type":"stream","name":"stderr","text":["2025-09-10 14:34:57.839 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.840 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.841 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.842 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.862 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.863 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.865 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.867 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.868 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.870 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.872 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.874 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.875 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.877 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.879 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.880 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.881 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-09-10 14:34:57.883 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]}],"source":["# app.py\n","import streamlit as st\n","import pandas as pd\n","import joblib\n","import os\n","import shap\n","import matplotlib.pyplot as plt\n","\n","# ======================\n","# Load Saved Model\n","# ======================\n","@st.cache_resource\n","def load_pipeline():\n","    model_path = \"churn_pipeline_20250910_100102.joblib\"  # <-- Ensure this matches your model file\n","    if not os.path.exists(model_path):\n","        st.error(f\"❌ Model file not found at: {model_path}\")\n","        st.stop()\n","    return joblib.load(model_path)\n","\n","pipeline = load_pipeline()\n","\n","# ======================\n","# App UI\n","# ======================\n","st.set_page_config(page_title=\"Customer Churn Predictor\", layout=\"wide\")\n","st.title(\"📊 Customer Churn Prediction with SHAP Explanations\")\n","st.write(\"Upload your customer dataset (CSV/Excel) to predict churn risk and explain predictions with SHAP.\")\n","\n","# ======================\n","# File Upload\n","# ======================\n","uploaded_file = st.file_uploader(\"Upload a CSV or Excel file\", type=[\"csv\", \"xlsx\"])\n","\n","if uploaded_file:\n","    try:\n","        # Read input file\n","        if uploaded_file.name.endswith(\".csv\"):\n","            company_df = pd.read_csv(uploaded_file)\n","        else:\n","            company_df = pd.read_excel(uploaded_file)\n","\n","        st.success(f\"✅ File uploaded successfully! Shape: {company_df.shape}\")\n","        st.dataframe(company_df.head())\n","\n","        # ======================\n","        # Run Predictions\n","        # ======================\n","        pred_probs = pipeline.predict_proba(company_df)[:, 1]\n","        company_df[\"churn_probability\"] = pred_probs\n","        company_df[\"churn_risk\"] = pd.cut(\n","            company_df[\"churn_probability\"],\n","            bins=[0, 0.5, 0.7, 1],\n","            labels=[\"Low\", \"Medium\", \"High\"]\n","        )\n","\n","        # Show preview\n","        st.subheader(\"🔍 Predictions (Preview)\")\n","        st.dataframe(company_df.head(20))\n","\n","        # ======================\n","        # SHAP Explanations\n","        # ======================\n","        st.subheader(\"🧐 Explain a Customer’s Prediction\")\n","\n","        # Detect customer identifier column\n","        id_col = None\n","        for col in [\"customer_id\", \"CustomerID\", \"name\", \"Name\", \"ID\"]:\n","            if col in company_df.columns:\n","                id_col = col\n","                break\n","\n","        if id_col:\n","            customer_list = company_df[id_col].astype(str).tolist()\n","            selected_customer = st.selectbox(\"Select a customer\", customer_list)\n","            row_data = company_df[company_df[id_col].astype(str) == selected_customer].iloc[[0]]\n","        else:\n","            row_index = st.number_input(\"Enter row number (0 = first customer)\", min_value=0, max_value=len(company_df)-1, value=0)\n","            row_data = company_df.iloc[[row_index]]\n","\n","        st.write(\"### Selected Customer Data\")\n","        st.dataframe(row_data)\n","\n","        # SHAP explainer\n","        st.write(\"### SHAP Explanation\")\n","        explainer = shap.Explainer(pipeline.named_steps[\"clf\"], pipeline.named_steps[\"preprocessor\"].transform(company_df))\n","        shap_values = explainer(pipeline.named_steps[\"preprocessor\"].transform(row_data))\n","\n","        # Plot SHAP bar chart\n","        fig, ax = plt.subplots()\n","        shap.plots.bar(shap_values[0], max_display=10, show=False)\n","        st.pyplot(fig)\n","\n","        # ======================\n","        # Download Results\n","        # ======================\n","        st.subheader(\"⬇️ Export Predictions\")\n","        csv = company_df.to_csv(index=False).encode(\"utf-8\")\n","        st.download_button(\n","            \"Download Predictions (CSV)\",\n","            data=csv,\n","            file_name=\"churn_predictions.csv\",\n","            mime=\"text/csv\",\n","        )\n","\n","        # Excel Export\n","        excel_path = \"churn_predictions.xlsx\"\n","        company_df.to_excel(excel_path, index=False)\n","        with open(excel_path, \"rb\") as f:\n","            st.download_button(\n","                \"Download Predictions (Excel)\",\n","                data=f,\n","                file_name=\"churn_predictions.xlsx\",\n","                mime=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n","            )\n","\n","    except Exception as e:\n","        st.error(f\"⚠️ Error processing file: {e}\")\n"]},{"cell_type":"code","source":[],"metadata":{"id":"pvNC6SUi7pqG"},"execution_count":null,"outputs":[]}]}
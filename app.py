# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qvNpCxoJhMd0Zzp9wj_G7KcdmV2_v2sJ
"""

import streamlit as st
import pandas as pd
import joblib
import os
import shap
import matplotlib.pyplot as plt

# ======================
# Load Saved Model
# ======================
@st.cache_resource
def load_pipeline():
    model_path = "churn_pipeline_20250910_100102.joblib"  # <-- Ensure this matches your model file
    if not os.path.exists(model_path):
        st.error(f"❌ Model file not found at: {model_path}")
        st.stop()
    return joblib.load(model_path)

pipeline = load_pipeline()

# ======================
# App UI
# ======================
st.set_page_config(page_title="Customer Churn Predictor", layout="wide")
st.title("📊 Customer Churn Prediction with SHAP Explanations")
st.write("Upload your customer dataset (CSV/Excel) to predict churn risk and explain predictions with SHAP.")

# ======================
# File Upload
# ======================
uploaded_file = st.file_uploader("Upload a CSV or Excel file", type=["csv", "xlsx"])

if uploaded_file:
    try:
        # Read input file
        if uploaded_file.name.endswith(".csv"):
            company_df = pd.read_csv(uploaded_file)
        else:
            company_df = pd.read_excel(uploaded_file)

        st.success(f"✅ File uploaded successfully! Shape: {company_df.shape}")
        st.dataframe(company_df.head())

        # ======================
        # Run Predictions
        # ======================
        pred_probs = pipeline.predict_proba(company_df)[:, 1]
        company_df["churn_probability"] = pred_probs
        company_df["churn_risk"] = pd.cut(
            company_df["churn_probability"],
            bins=[0, 0.5, 0.7, 1],
            labels=["Low", "Medium", "High"]
        )

        # Show preview
        st.subheader("🔍 Predictions (Preview)")
        st.dataframe(company_df.head(20))

        # ======================
        # SHAP Explanations
        # ======================
        st.subheader("🧐 Explain a Customer’s Prediction")

        # Detect customer identifier column
        id_col = None
        for col in ["customer_id", "CustomerID", "name", "Name", "ID"]:
            if col in company_df.columns:
                id_col = col
                break

        if id_col:
            customer_list = company_df[id_col].astype(str).tolist()
            selected_customer = st.selectbox("Select a customer", customer_list)
            row_data = company_df[company_df[id_col].astype(str) == selected_customer].iloc[[0]]
        else:
            row_index = st.number_input("Enter row number (0 = first customer)", min_value=0, max_value=len(company_df)-1, value=0)
            row_data = company_df.iloc[[row_index]]

        st.write("### Selected Customer Data")
        st.dataframe(row_data)

        # SHAP explainer
        st.write("### SHAP Explanation")
        explainer = shap.Explainer(pipeline.named_steps["clf"], pipeline.named_steps["preprocessor"].transform(company_df))
        shap_values = explainer(pipeline.named_steps["preprocessor"].transform(row_data))

        # Plot SHAP bar chart
        fig, ax = plt.subplots()
        shap.plots.bar(shap_values[0], max_display=10, show=False)
        st.pyplot(fig)

        # ======================
        # Download Results
        # ======================
        st.subheader("⬇️ Export Predictions")
        csv = company_df.to_csv(index=False).encode("utf-8")
        st.download_button(
            "Download Predictions (CSV)",
            data=csv,
            file_name="churn_predictions.csv",
            mime="text/csv",
        )

        # Excel Export
        excel_path = "churn_predictions.xlsx"
        company_df.to_excel(excel_path, index=False)
        with open(excel_path, "rb") as f:
            st.download_button(
                "Download Predictions (Excel)",
                data=f,
                file_name="churn_predictions.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

    except Exception as e:
        st.error(f"⚠️ Error processing file: {e}")

